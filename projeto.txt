 -> Nome da liguagem
 -> Tipos (pelo menos 3)
 -> Construções (seleção, repetição, entrada, saída, declaração de variáveis, etc.)
 -> Sintaxe dos comandos (exemplos, ainda não precisa de GLC)
 -> Delimitação dos tokens (Expressões regulares e autômato) -- padrões de tokens
 -> Formato dos identificadores
 -> Operadores lógicos, relacionais e aritméticos


Nome = #Monolith

Tipos = Integer, Float, Char

Variáveis = nomes somente letras maiúsculas.

O fim de linha é considerado quando é encontrado um ';'

Blocos são definidos com a abertura com '$>' e fechamento '$<', funções com bloco deverão manter o ';' somente após o fechamento do bloco.

Construções = todos os construtores entre Underline _<construção>_

_repeater_ <valor> <operador> <valor> $> <... linhas no laço ...> $<;
Compara somente variáveis do mesmo tipo, repete enquanto for verdadeiro.

_for_ <início> , <final> , <nova_variável_de_controle> $> <... linhas no laço ...> $<;
Sempre adiciona +1, pode ser alterado dentro das linhas do laço

_if_ <valor> <operador> <valor> $> <... linhas após codição ...> $<; 
Compara somente variáveis do mesmo tipo

_print_ <variável> || "String a ser escrita";
Somente uma das opções

_read_ <variável>;
Lê do terminal e guarda na variável selecionada, para o programa

Declaração de variável sempre com o _new_ <tipo> <nome>, podem ser decladas em qualquer lugar, porém a atribução deve ser feita em um próximo comando.

Operadores:
    
    Aritméticos ->
        Atribuição      =
        Adição          +
        Subtração       - 
        Divisão         /
        Multiplicação   *
    
    Lógicos ->
        Igualdade       ==
        E               &&
        OU              ||
        Negação         !!
        Maior           >>
        Menor           <<


    Palavra-chave   key     _(a-z)+_    repeater, if, for, new, print, reader 

    Identificador   id      (A-Z)+ 

    Tipo            tp      _(A-Z)(a-z)*_ int, ft, ch

    Integer         int     (0-9)+

    Float           ft      (0-9)+.(0-9)*

    Char            ch      '(a-zA-Z)'

    Final-Linha     ;       ;

    Abre Bloco      >       $>

    Fecha Bloco     <       $<

    String          str     "(a-zA-Z?!=+-*/)*"

    Aritméticos     ari     (+-/*)

    declaração      =       (=)

    Lógicos         log     (::,&&,||,!!)

    Relacional      rel     (<<,>>)

GLC ==
{
    <programa> -> <declaracoes> 

    <declaracoes> -> <declaracao> ; <declaracoes> | ε

    <declaracao> -> <atribuicao> | <declaracao-tipo> | <funcao>

    <declaracao-tipo> -> new tp id  {marcar nome e tipo de variável}

    <atribuicao> -> id = <tipo-atribuicao> {verificar tipo e colocar valor no tipo}

    <tipo-atribuicao> -> <multi-char>

    <multi> -> <termo> <multi-linha>
    
    <multi-linha> -> * <termo> <multi-linha> | / <termo> <multi-linha> | + <termo> <tipo-expressao> | - <termo> <tipo-expressao> | ε

    <tipo-expressao> -> + <termo> <tipo-expressao> | - <termo> <tipo-expressao> | ε

    <termo> -> id | int | ft

    <funcao> -> repeater <sera> | if <sera> | for int , int , id > <declaracoes> < | print <impressao> | reader id 
    
    <impressao> -> id | str

    <multi-char> <multi> | ch

    <sera> ->  <multi-char> <sera-var>

    <sera-var> ->  log <log-rel> > <declaracoes> < | rel <log-rel> > <declaracoes> <  

    <log-rel> -> <multi-char> <log-rel-var>  

    <log-rel-var> -> log <multi-char> <log-rel-var> | rel <multi-char> <log-rel-var> | ε 


}

First:
    <programa>          --> ;, new, id, repeater, if, for, print, reader 
    <declaracoes>       --> ε, new, id, repeater, if, for, print, reader 
    <declaracao>        --> new, id, repeater, if, for, print, reader
    <declaracao-tipo>   --> new
    <atribuicao>        --> id
    <tipo-atribuicao>   --> ch, id, int, ft
    <multi>             --> id, int, ft 
    <multi-linha>       --> ε, *, /
    <tipo-expressao>    --> ε, *, +, -, / 
    <termo>             --> id, int, ft
    <funcao>            --> repeater, if, for, print, reader
    <impressao>         --> id, str
    <multi-char>	    --> id, int, ft, ch
    <sera>              --> id, int, ft, ch
    <sera-var>          --> log, rel
    <log-rel>           --> id, int, ft, ch
    <log-rel-var>       --> log, rel, ε 


Follow:
    <programa>          --> $  
    <declaracoes>       --> ;, <, $
    <declaracao>        --> ;
    <declaracao-tipo>   --> ; 
    <atribuicao>        --> ;
    <tipo-atribuicao>   --> ;
    <multi>             --> ;, log, rel, >
    <multi-linha>       --> ;, log, rel, >
    <tipo-expressao>    --> ;, log, rel, >
    <termo>             --> ;, log, rel, >
    <funcao>            --> ;
    <impressao>         --> ;
    <multi-char>	--> log, rel, >
    <sera>              --> ;
    <sera-var>          --> ;
    <log-rel>           --> >
    <log-rel-var>       --> >

 Exemplo:

 _new_ _Integer_ TESTE; 
 _new_ _Integer_ VAR;

 VAR = 10 + 1;
 TESTE = 5;

 _print_ "Teste de linguagem";

 _if_ 10 << VAR $> 
 _print_ "Variável maior que dez";
 <$;

 _repeater_ 10 << VAR $>
 VAR = VAR - 10;
 <$;

 _for_ 1, 10, I $> 
 TESTE = TESTE * 2;
 <$;

 _print_ TESTE;
 

Código de três endereços:

Celestial Hub   --> gerar código ETAC

limitados a dez registradores temporários
https://www.explore-celestial-with.me/
https://docs.explore-celestial-with.me/
